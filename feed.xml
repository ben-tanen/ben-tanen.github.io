<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ben Tanen</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</description>
    <link>http://ben-tanen.github.io/blog/</link>
    <atom:link href="http://ben-tanen.github.io/blog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 14 Dec 2014 16:26:05 -0500</pubDate>
    <lastBuildDate>Sun, 14 Dec 2014 16:26:05 -0500</lastBuildDate>
    <generator>Jekyll v2.2.0</generator>
    
      <item>
        <title>Random Project: Base64 Decoder</title>
        <description>&lt;p&gt;In the past couple months I’ve become increasingly more interested and fascinated in GitHub. Now, most of this is likely due to the newbie CS student thinking “Woahhh, revision control and free project hosting” but GH is pretty remarkable. A project I’ve always been interested in doing was a blog where I write about whatever, much like the page you are reading right now. Eventually I found &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, but before that I toyed around with the idea of hosting the raw text files on GitHub, decoding the text using the base64 decoder, and then pasting that to the template/page that I was actually using for the blog (likely on GitHub). Now this idea is actually really dumb and a lot more difficult than it needs to be, but that didn’t stop me from making the base64 decoder in C++, because why not.&lt;/p&gt;

&lt;p&gt;So, by reversing &lt;a href=&quot;http://en.wikipedia.org/wiki/Base64#Examples&quot;&gt;Wikipedia’s algorithm&lt;/a&gt; for base64 encoding, I spent a little time and built the decoder. Basically, the algorithm is just:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Convert each encoded character to Ascii values&lt;/li&gt;
  &lt;li&gt;String together 6-bit strings of Ascii values&lt;/li&gt;
  &lt;li&gt;Break string up into 8-bit strings&lt;/li&gt;
  &lt;li&gt;Convert 8-bit strings back into Ascii values&lt;/li&gt;
  &lt;li&gt;Convert to decoded character&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Nothing groundbreaking but it was a fun little project. And who wouldn’t prefer doing little projects instead of sleeping? &lt;/p&gt;

&lt;p&gt;Link to GitHub Repo &lt;a href=&quot;https://github.com/ben-tanen/Base64Decode&quot;&gt;Here&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 12 Nov 2014 10:05:41 -0500</pubDate>
        <link>http://ben-tanen.github.io/blog/2014/11/12/base64.html</link>
        <guid isPermaLink="true">http://ben-tanen.github.io/blog/2014/11/12/base64.html</guid>
        
        
        <category>github</category>
        
        <category>base64</category>
        
      </item>
    
      <item>
        <title>Up-to-Date Infographics</title>
        <description>&lt;p&gt;When I first started working with web design, &lt;a href=&quot;http://www.kerem.co&quot;&gt;Kerem Suer’s&lt;/a&gt; website had a lot of features that inspired me. One of these features was his use of &lt;a href=&quot;https://web.archive.org/web/20130114231739/http://kerem.co/&quot;&gt;infographics&lt;/a&gt;. It was a clever way to relay fairly insignificant information in an interesting way. I wanted to implement something similar and for the past few years I’ve been taking a (failing) whack at it.&lt;/p&gt;

&lt;p&gt;For my infographics, I was attempting to display what I was currently up to (currently reading, listening to, watching). I never thought that it could be live updates, but more so descriptions of the book, album, and show/movie that I was into that week. However, the struggle with this was it was not easy to update the information. I had hard-coded into my HTML file, and accessing, changing, and uploading this was generally a pain, leaving my information drastically out-of-date.&lt;/p&gt;

&lt;p&gt;Fast forward to today, my infographic aspirations remain, and I think I’ve found my solution. Using the services of &lt;a href=&quot;http://www.IFTTT.com&quot;&gt;IFTTT&lt;/a&gt;, Dropbox, and some simple jQuery, I set up a system that allows me to send a quick text and see my online infographic update within a few moments.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/img/posts/infographics_ex.png&quot; alt=&quot;Infographic Example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The set-up works like this: I send a text with the category I’m updating (reading, listening to, watching) and the new media (book, movie, album) to IFTTT. IFTTT reads the text, and appends the contents of the message onto a public Dropbox text file. From there, a jQuery script on my page reads this file, determines the book, show/movie, and album that is most recently added, and adds this information to the web page.&lt;/p&gt;

&lt;p&gt;It’s a pretty simple system, nothing ground-breaking, but for me, it solves a long standing problem. So if you really care about my daily activities, just know my website is now kind of, sort of up-to-date. &lt;/p&gt;

</description>
        <pubDate>Sat, 01 Nov 2014 11:05:41 -0400</pubDate>
        <link>http://ben-tanen.github.io/blog/2014/11/01/infographics.html</link>
        <guid isPermaLink="true">http://ben-tanen.github.io/blog/2014/11/01/infographics.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Rap, Data, and Design</title>
        <description>&lt;p&gt;A genre of music I don’t find myself particularly well-versed in is Hip-Hop and Rap. I’ll listen to it on occasion when &lt;a href=&quot;http://www.headroommusic.org/&quot;&gt;my more rap-inclined friend&lt;/a&gt; suggests some, but for the most part, I really only know the highlights. One thing I very much do like, though, is beautiful representation of data, and Matt Daniels did the wonderful task of combining the two.&lt;/p&gt;

&lt;p&gt;In his post, &lt;a href=&quot;http://experiments.undercurrent.com/&quot;&gt;The Largest Vocabulary in Hip Hop&lt;/a&gt;, Daniels analyzed the discography of 85 rappers (he added another 19 in his &lt;a href=&quot;http://mfdaniels.tumblr.com/post/93313634355/updated-rappers-sorted-by-size-of-vocabulary-20-new/&quot;&gt;updated version&lt;/a&gt; of the piece) and determined who had the largest unique vocabulary. Using Python, Daniels looked at the first 35,000 lyrics of each rapper and counted the number of unique words used. The result is a beautifully represented data set, arranging the rappers by the size of their vocabularies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/img/posts/rap_vocab.png&quot; alt=&quot;Screenshot from the Post&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Daniels does some interesting analysis of the data in the actual post (ex: examining how Wu-Tang Clan holds up) and it’s worth checking out. Note: after Daniels posted the piece, multiple sites refuted the post as it seems to imply that a rapper’s talent is determined by the number of unique words they use. However, Daniels addressed this apparent implication in the updated piece, saying: &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“In short, take all of this with a grain of salt. Think of this as a data-point that sparks interesting discussion about hip hop and word-usage, and absolutely not a conclusive argument for rapper x is better than rapper y.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From my limited experience, a huge part of a rapper’s talent is derived from how they combine their words in creative, unique way and then how they make those words flow. These two aspects are independent of the above data, so as Daniels mentions, this is only part of a greater discussion. &lt;/p&gt;

&lt;p&gt;Regardless, the piece is creative and does a great job of combining two seemingly dissimilar things. It’s definitely worth a read.&lt;/p&gt;

&lt;p&gt;By the way, when I said I wasn’t very well versed in rap, I wasn’t lying. Of the 104 rappers mentioned in the piece, I have only listened to (more than one song) 22 of them and a fair amount of those are simply because they are some of the biggest names in music. But now I have a good list of 82 rappers to delve into, so that’s something.&lt;/p&gt;

</description>
        <pubDate>Fri, 31 Oct 2014 11:05:41 -0400</pubDate>
        <link>http://ben-tanen.github.io/blog/2014/10/31/rap-data-design.html</link>
        <guid isPermaLink="true">http://ben-tanen.github.io/blog/2014/10/31/rap-data-design.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
